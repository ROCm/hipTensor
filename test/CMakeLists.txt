###############################################################################
 #
 # MIT License
 #
 # Copyright (c) 2023 Advanced Micro Devices, Inc.
 #
 # Permission is hereby granted, free of charge, to any person obtaining a copy
 # of this software and associated documentation files (the "Software"), to deal
 # in the Software without restriction, including without limitation the rights
 # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 # copies of the Software, and to permit persons to whom the Software is
 # furnished to do so, subject to the following conditions:
 #
 # The above copyright notice and this permission notice shall be included in
 # all copies or substantial portions of the Software.
 #
 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 # THE SOFTWARE.
 #
 ###############################################################################

# Find / configure LLVM
add_subdirectory(llvm)

find_package(LLVM REQUIRED CONFIG)

message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")

include( FetchContent )

FetchContent_Declare(
  googletest
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG 609281088cfefc76f9d0ce82e1ff6c30cc3591e5
)
FetchContent_GetProperties(googletest)
if(NOT googletest_POPULATED)
  # Fetch the content using default details
  FetchContent_Populate(googletest)
  # Save the shared libs setting, then force to static libs
  set(BUILD_SHARED_LIBS_OLD ${BUILD_SHARED_LIBS})
  set(BUILD_SHARED_LIBS OFF CACHE INTERNAL "Build SHARED libraries" FORCE)
  # Add gtest targets as static libs
  add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})
  # Restore shared libs setting
  set(BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS_OLD} CACHE INTERNAL "Build SHARED libraries" FORCE)
endif()

# Setup a test manifest
set(INSTALL_TEST_FILE "${CMAKE_CURRENT_BINARY_DIR}/install_CTestTestfile.cmake")
file(WRITE "${INSTALL_TEST_FILE}"
[=[
# This is a test file generated by hipTensor for install time.
# It differs slightly from the default testfile, and you may encounter issues because of that.
]=]
)

# Target that will trigger build of all tests
add_custom_target(hiptensor_tests)

set(HIPTENSOR_COMMON_TEST_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/hip_resource.cpp
                                  ${CMAKE_CURRENT_SOURCE_DIR}/hiptensor_gtest_main.cpp)

# Create test executables and deploy
function(add_hiptensor_test BINARY_NAME FILE_NAME)
    list(APPEND FILE_NAME ${ARGN})

    message( STATUS "adding hiptensor test: ${BINARY_NAME}")
    add_executable(${BINARY_NAME} ${FILE_NAME})

    # Test must propagate the build interface includes to make sure
    # hiptensor includes are captured at runtime.
    target_link_libraries(${BINARY_NAME} PRIVATE hiptensor::hiptensor hiptensor_llvm gtest LLVMSupport "-L${HIP_CLANG_ROOT}/lib" "-Wl,-rpath=${HIP_CLANG_ROOT}/lib")

    target_include_directories(${BINARY_NAME} PRIVATE
                               ${CMAKE_CURRENT_SOURCE_DIR}
                               ${PROJECT_SOURCE_DIR}/library/include
                               ${PROJECT_SOURCE_DIR}/library/src/contraction
                               ${PROJECT_SOURCE_DIR}/test)

    # Build this test under custom target
    add_dependencies(hiptensor_tests ${BINARY_NAME})

    # Register with ctest
    add_test(NAME ${BINARY_NAME} COMMAND ${BINARY_NAME})
    set_property(TEST ${BINARY_NAME} PROPERTY SKIP_REGULAR_EXPRESSION "HIPTENSOR_STATUS_ARCH_MISMATCH" "unsupported host device")

    # Install with rocm pkg
    rocm_install_targets(
    TARGETS ${BINARY_NAME}
    COMPONENT tests
    )

    # Add to testing manifest
    get_target_property(EXE_NAME ${BINARY_NAME} RUNTIME_OUTPUT_NAME)
    if(EXE_NAME STREQUAL "EXE_NAME-NOTFOUND")
        get_target_property(EXE_NAME ${BINARY_NAME} OUTPUT_NAME)
        if(EXE_NAME STREQUAL "EXE_NAME-NOTFOUND")
            set(EXE_NAME "${BINARY_NAME}")
        endif()
    endif()
    file(APPEND "${INSTALL_TEST_FILE}" "add_test(${BINARY_NAME} \"../${BINARY_NAME}\")\n")

endfunction()

# Create unit test executables and deploy
# Differs from hiptensor_test in that src include directory is linked
function(add_hiptensor_unit_test BINARY_NAME FILE_NAME)

    message( STATUS "adding hiptensor unit test: ${BINARY_NAME}")
    add_executable(${BINARY_NAME} ${FILE_NAME})

    # Test must propagate the build interface includes to make sure
    # hiptensor includes are captured at runtime.
    target_link_libraries(${BINARY_NAME} PRIVATE hiptensor::hiptensor hiptensor_llvm "-L${HIP_CLANG_ROOT}/lib" "-Wl,-rpath=${HIP_CLANG_ROOT}/lib")
    target_include_directories(${BINARY_NAME} PRIVATE
                               ${CMAKE_CURRENT_SOURCE_DIR}
                               ${PROJECT_SOURCE_DIR}/library/include
                               ${PROJECT_SOURCE_DIR}/library/src/include
                               ${PROJECT_SOURCE_DIR}/test)

    # Build this test under custom target
    add_dependencies(hiptensor_tests ${BINARY_NAME})

    # Register with ctest
    add_test(NAME ${BINARY_NAME} COMMAND ${BINARY_NAME})
    set_property(TEST ${BINARY_NAME} PROPERTY SKIP_REGULAR_EXPRESSION "HIPTENSOR_STATUS_ARCH_MISMATCH" "unsupported host device")

    # Install with rocm pkg
    rocm_install_targets(
    TARGETS ${BINARY_NAME}
    COMPONENT tests
    )

    # Add to testing manifest
    get_target_property(EXE_NAME ${BINARY_NAME} RUNTIME_OUTPUT_NAME)
    if(EXE_NAME STREQUAL "EXE_NAME-NOTFOUND")
        get_target_property(EXE_NAME ${BINARY_NAME} OUTPUT_NAME)
        if(EXE_NAME STREQUAL "EXE_NAME-NOTFOUND")
            set(EXE_NAME "${BINARY_NAME}")
        endif()
    endif()
    file(APPEND "${INSTALL_TEST_FILE}" "add_test(${BINARY_NAME} \"../${BINARY_NAME}\")\n")

endfunction()

add_subdirectory(00_unit)
add_subdirectory(01_contraction)

rocm_install(
    FILES "${INSTALL_TEST_FILE}"
    DESTINATION "${CMAKE_INSTALL_BINDIR}/${PROJECT_NAME}"
    COMPONENT tests
    RENAME "CTestTestfile.cmake"
)
